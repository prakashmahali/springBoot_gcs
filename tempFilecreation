import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;

@Service
public class FileHandlerService {

    private static final String DATE_FORMAT = "yyyyMMddHHmmss";
    private BufferedWriter writer;
    private File currentFile;

    @Value("${file.directory.path}")
    private String directoryPath;

    @Value("${file.name.prefix}")
    private String fileNamePrefix;

    @Scheduled(fixedRate = 60000) // 1 minute in milliseconds
    public void checkAndCreateFile() throws IOException {
        if (writer == null || currentFile == null || !currentFile.exists()) {
            createNewFile();
        }
    }

    private void createNewFile() throws IOException {
        if (writer != null) {
            writer.close();
        }

        String timestamp = new SimpleDateFormat(DATE_FORMAT).format(new Date());
        String fileName = fileNamePrefix + "_" + timestamp + ".txt";
        currentFile = new File(directoryPath, fileName);
        writer = new BufferedWriter(new FileWriter(currentFile));

        System.out.println("Created new file: " + currentFile.getAbsolutePath());
    }

    @KafkaListener(topics = "${kafka.topic.name}", groupId = "${kafka.group.id}")
    public void consumeData(ConsumerRecord<String, String> record) {
        try {
            if (writer == null || currentFile == null || !currentFile.exists()) {
                createNewFile();
            }
            writer.write(record.value());
            writer.newLine();
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
